package org.example;

public class CharacterWrapper {

    public static void main(String[] args) {
        // Character l√† wrapper cho type character.

        // .valueOf(): d√πng ƒë·ªÉ initialize m·ªôt Character object.
        Character ch1 = Character.valueOf('a');

        // Character includes several static methods that categorize characters and
        //alter their case. Character c√≥ nhi·ªÅu static method ƒë·ªÉ ktra 1 k√Ω t·ª± l√† digit,
        //letter hay whitespace,...

        char[] chArr = {'a', 'b', '5', '!', 'A'};
        for(int i=0; i < chArr.length; i++) {
            if(Character.isDigit(chArr[i])) {
                System.out.println(chArr[i] + " is a digit");
            }
            if(Character.isLetter(chArr[i])) {
                System.out.println(chArr[i] + " is a letter.");
            }
            if(Character.isWhitespace(chArr[i])) {
                System.out.println(chArr[i] + " is a whitespace");
            }
            if(Character.isUpperCase(chArr[i])) {
                System.out.println(chArr[i] + " is uppercase");
            }
            if(Character.isLowerCase(chArr[i])) {
                System.out.println(chArr[i] + " is lowercase.");
            }
        }

        Character ch2 = 'e';
        System.out.println("Character.isLetterOrDigit(ch2): " + Character.isLetterOrDigit(ch2));

        // Unicode Code Point support for Character class.
        // - L√∫c x∆∞a, ch·ªâ c·∫ßn 16 bit ƒë·ªÉ ch·ª©a to√†n b·ªô k√Ω t·ª± Unicode t∆∞∆°ng ·ª©ng v·ªõi k√≠ch th∆∞·ªõc
        //c·ªßa ki·ªÉu char, c√°c k√Ω t·ª± Unicode c√≥ gi√° tr·ªã t·ª´ 0 ~ FFFF. Theo th·ªùi gian, b·∫£ng m√£
        //Unicode ƒëc m·ªü r·ªông ƒë·ªÉ h·ªó tr·ª£ c√°c k√Ω t·ª± m·ªõi, kic√≠ch th∆∞·ªõc c·ªßa n√≥ l√™n t·ªõi 0 ~ 10FFFF

        // - Code point: l√† identify c·ªßa 1 character trong b·∫£ng m√£ Unicode, n√≥ c√≥ gi√° tr·ªã
        //t·ª´ 0 ~ 10FFFF

        // - supplemental character: l√† c√°c character c√≥ code point n·∫±m ngo√†i FFFF
        // - basic multilingual plane(BMP): l√† c√°c character c√≥ code point n·∫±m trong 0 ~ FFFF

        // - Do s·ª± m·ªü r·ªông c·ªßa b·∫£ng Unicode. ki·ªÉu char ko ƒë·ªß k√≠ch th∆∞·ªõc ƒë·ªÉ ch·ª©a. C√°c nh√† ph√°t
        //tri·ªÉn Java ƒë√£ t·∫°o ra 2 c√°ch ƒë·ªÉ x·ª≠ l√Ω v·∫•n ƒë·ªÅ n√†y
        //  + C√°ch 1: d√πng 2 char ƒë·ªÉ bi·ªÉu di·ªÖn k√Ω t·ª± supplemental, char th·ª© 1 ƒëgl high surrogate,
        //char th·ª© 2 ƒëgl low surrogate. C√≥ th·ªÉ d√πng Character.codePointAt() ƒë·ªÉ chuy·ªÉn ƒë·ªïi t·ª´
        //supplemental character qua code point
        String musicalSymbol = "\uD834\uDD1E"; // ùÑû
        System.out.println(musicalSymbol);
        System.out.println(musicalSymbol.getBytes().length);
        System.out.println("Character.codePointAt(musicalSymbol, 0): " + Character.codePointAt(musicalSymbol, 0));

        // C√°c supplemental character d√πng ƒë·∫øn 2 char (4 byte) ƒë·ªÉ bi·ªÉu di·ªÖn, length c·ªßa character ƒë√≥
        //l√† 2. Do ƒë√≥, m·ªôt string c√≥ length l√† 100 ch∆∞a ch·∫Øc ch·ª©a 100 k√Ω t·ª±

        //  + C√°ch 2: Java overload l·∫°i 1 s·ªë method c·ªßa Character nh·∫≠n v√†o tham s·ªë ki·ªÉu int thay v√¨
        //char v√¨ int c√≥ k√≠ch th∆∞·ªõc ƒë·ªß l·ªõn ƒë·ªÉ bi·ªÉu di·ªÖn c√°c supplemental character.
        char ch3 = 'a';
        int codePoint = ch3;
        System.out.println("Character.isLetter(codePoint): " + Character.isLetter(codePoint));




    }

}
